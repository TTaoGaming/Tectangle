#!/usr/bin/env node
// Workspace Markdown Catalog + 6m Summary (v0)
import { promises as fs } from 'node:fs';
import path from 'node:path';

const ROOT = process.cwd();
const OUT_DIR = path.join(ROOT, 'docs', 'knowledge');
const WORLD_INDEX = path.join(OUT_DIR, 'WORLD_INDEX.md');
const SIX_MONTH = path.join(OUT_DIR, `SIX_MONTH_SUMMARY_${new Date().toISOString().slice(0,10).replace(/-/g,'')}.md`);

const EXCLUDE_DIRS = new Set(['.git','node_modules','.venv','dist','build','out','.next','.cache','coverage','tmp','temp','__pycache__','.pytest_cache','.DS_Store','.devcontainer']);

function shouldSkipDir(dirName){ return EXCLUDE_DIRS.has(dirName) || dirName.startsWith('archive-') || dirName.startsWith('archive-stale'); }

async function walk(dir){
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const out = [];
  for (const e of entries){
    if (e.name.startsWith('.git')) continue;
    const full = path.join(dir, e.name);
    if (e.isDirectory()){
      if (shouldSkipDir(e.name)) continue;
      out.push(...await walk(full));
    } else if (e.isFile()){
      if (e.name.toLowerCase().endsWith('.md')) out.push(full);
    }
  }
  return out;
}

function parseMeta(md){
  const lines = md.split(/\r?\n/);
  const meta = { title: null, created_at: null, tldr: null };
  for (let i=0;i<Math.min(lines.length,80);i++){
    const l = lines[i].trim();
    if (!meta.title && /^#\s+/.test(l)) meta.title = l.replace(/^#\s+/, '');
    if (!meta.title && /^title:\s*/i.test(l)){
      const m = l.match(/^title:\s*["']?(.+?)["']?\s*$/i); if (m) meta.title = m[1];
    }
    if (!meta.created_at && /^created_at:\s*/i.test(l)){
      const m = l.match(/^created_at:\s*["']?(.+?)["']?\s*$/i); if (m) meta.created_at = m[1];
    }
    if (!meta.tldr && /^\s*TL;?DR\s*:/i.test(l)) meta.tldr = l.replace(/^\s*TL;?DR\s*:\s*/i,'').trim();
  }
  return meta;
}

function monthKey(ts){ const d = new Date(ts); return isNaN(d) ? null : `${d.getUTCFullYear()}-${String(d.getUTCMonth()+1).padStart(2,'0')}`; }

async function main(){
  await fs.mkdir(OUT_DIR, { recursive: true });
  const all = await walk(ROOT);

  const items = [];
  for (const file of all){
    try {
      const md = await fs.readFile(file,'utf8');
      const meta = parseMeta(md);
      const stat = await fs.stat(file);
      const mtime = stat.mtime.toISOString();
      const created = meta.created_at || mtime;
      const rel = path.relative(ROOT, file).replace(/\\/g,'/');
      const title = meta.title || path.basename(file);
      const words = md.split(/\s+/).filter(Boolean).length;
      items.push({ rel, title, created, mtime, tldr: meta.tldr || '', words });
    } catch { /* skip */ }
  }

  // Build WORLD_INDEX
  const tableRows = items
    .sort((a,b)=> (Date.parse(b.created)-Date.parse(a.created)) || (b.words-a.words))
    .map((e,i)=> `| ${i+1} | ${e.title} | ${e.created} | [${e.rel}](${e.rel}) | ${(e.tldr||'').replace(/\|/g,'\\|')} |`);

  const worldLines = [
    '# WORLD INDEX',
    '',
    'Auto-generated by scripts/md_catalog.mjs. Do not edit by hand.',
    '',
    `Total markdown files: ${items.length}`,
    '',
    '| Rank | Title | Created | File | TL;DR |',
    '|---:|---|---|---|---|',
    ...tableRows
  ];
  await fs.writeFile(WORLD_INDEX, worldLines.join('\n'),'utf8');

  // Build 6m summary
  const now = new Date();
  const sixMonthsAgo = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth()-5, 1));
  const recent = items.filter(e => Date.parse(e.mtime) >= sixMonthsAgo.getTime());
  const byMonth = new Map();
  for (const e of recent){
    const k = monthKey(e.mtime) || 'unknown';
    byMonth.set(k, (byMonth.get(k)||0)+1);
  }
  const topRecent = [...recent]
    .sort((a,b)=> Date.parse(b.mtime)-Date.parse(a.mtime))
    .slice(0,15);

  const sixLines = [
    '# Six-Month Summary â€” AUTOGEN',
    '',
    `Generated: ${new Date().toISOString()}`,
    '',
    'TL;DR',
    '- High-activity months (md edits) and top recent docs listed below; use WORLD_INDEX to jump into artifacts.',
    '',
    '## Activity by month (last 6)',
    ...[...byMonth.entries()].sort((a,b)=> a[0].localeCompare(b[0])).map(([m,c])=> `- ${m}: ${c}`),
    '',
    '## Top recent docs (15)',
    '| When | Title | File | TL;DR |',
    '|---|---|---|---|',
    ...topRecent.map(e=> `| ${e.mtime} | ${e.title} | [${e.rel}](${e.rel}) | ${(e.tldr||'').replace(/\|/g,'\\|')} |`),
    '',
    '## Notes',
    '- This is a catalog, not a judgment. Use it to select candidates for GOLD.',
  ];
  await fs.writeFile(SIX_MONTH, sixLines.join('\n'),'utf8');

  console.log(`Indexed ${items.length} markdown files. Wrote WORLD_INDEX and 6m summary.`);
}

main().catch((err)=>{ console.error(err); process.exit(1); });
