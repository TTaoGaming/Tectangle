import { strict as assert } from 'assert';
import { decideExploit } from '../core/decide_exploit.mjs';

describe('Thread Sovereign decideExploit (smoke)', function(){
  it('returns a line, step, and guardrail with doctrine gloss', function(){
    const out = decideExploit({
      board: { problem:'Integrate Pinch with Hex (Tectangle) to unblock demo', metric:'demo_unblocked' },
      health: { frozenPass:true, smokePass:true, dupTitles:0, championsMiss:0 },
      doctrine: [{ topic:'Maneuver', principle:'decisive point', when_to_use:'high leverage', tradeoffs:'local optimum', coding_analogy:'ports/adapters', source:'test' }]
    });
    assert.ok(out && typeof out.line==='string' && out.line.length>10);
    assert.ok(/decisive/i.test(out.line), 'should include decisive wording');
    assert.ok(out.step && out.step.title && Array.isArray(out.step.commands));
    assert.ok(/guardrails|frozen|rollback/i.test(out.guardrail));
  });
});

