// Core: Decide one safe, reversible step in the Thread Sovereign voice
import fs from 'node:fs';

/**
 * @param {Object} input
 * @param {{problem?:string,metric?:string,constraint?:string,horizons?:string,current?:string}} input.board
 * @param {{frozenPass?:boolean,smokePass?:boolean,dupTitles?:number,championsMiss?:number}} input.health
 * @param {Array<{topic:string,principle:string,when_to_use:string,tradeoffs:string,coding_analogy:string,source:string}>} input.doctrine
 */
export function decideExploit({ board={}, health={}, doctrine=[] }){
  const guardrail = 'Ship only if frozen smoke PASS and duplicate titles == 0; rollback ready.';
  const frozen = !!health.frozenPass; const dup = +health.dupTitles||0;
  const ok = frozen && dup===0;

  // Doctrine hint: pick first matching to Problem keywords
  const problem = (board.problem||'').toLowerCase();
  const hint = doctrine.find(d => [d.topic,d.principle,d.coding_analogy]
    .some(s => (s||'').toLowerCase().split(/\W+/).some(w => w && problem.includes(w))))
    || doctrine.find(d=>d.topic==='Maneuver') || doctrine[0];
  const gloss = hint ? `${hint.topic}: ${hint.principle}` : '';

  // Default step (safe maintenance) if health unknown or failing
  let title = 'Daily health + one reversible improvement';
  let commands = [
    'npm run hive:daily',
    'npm run hive:turn:save',
  ];

  // If metric aims at demo_unblocked and problem mentions hex/pinch, suggest adapter seam
  const metric = (board.metric||'').toLowerCase();
  const wantsDemo = /demo/.test(metric) || /demo/.test(problem);
  const mentionsHex = /hex|hexagonal|tectangle/i.test(board.problem||'');
  const mentionsPinch = /pinch/i.test(board.problem||'');
  if (wantsDemo && mentionsHex && mentionsPinch) {
    title = 'Cut Pinchâ†’Hex adapter seam (ports/adapters)';
    commands = [
      'node HiveFleetObsidian/tools/prism_reframe.mjs --goal "Demo unblock via adapter"',
      'echo "Implement minimal PinchPort + HexAdapter and re-run frozen"'
    ];
  }

  const line = `Decide. Strike the decisive seam. ${gloss ? '('+gloss+') ' : ''}${title}.`;
  return { line, step: { title, commands }, guardrail };
}

